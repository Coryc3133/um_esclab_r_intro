typeof(NA_character_)
typeof(NA)
typeof(NULL)
typeof(NaN)
typeof(Inf)
typeof("one")
x <- 1:5 # sequence of the form starting_number:ending_number
?seq
seq()
seq(from = 1, to = 5)
seq(from = 1, to = 5, by = 2)
# We can also assign a vector of values this way
x <- c(2, 8.5, 1, 9)
x <- 1:5 # sequence of the form starting_number:ending_number
# We can also assign a vector of values this way
x <- c(2, 8.5, 1, 9)
letters <- c("a", "b", "c", "d")
mixed_vec <- c(x, letters)
mixed_vec <- c(x, letters)
mixed_vec
typeof(mixed_vec)
as.numeric(mixed_vec)
x[1]
x[1:2]
z <- 1:5
z[1]
x[1:2]
q[c(1, 3)]
z[c(1, 3)]
z[1:2]
z <- 5:10
z[1]
z[1:2]
z[c(1, 3)]
z[-1]
z[-c(1, 3)]
names(z)
names(z)
names(z) <- c("first", "second", "third", "fourth", "fifth")
names(z)
z
z <- 6:10
z[1]
z[1:2]
z[c(1, 3)]```
z[c(1, 3)]
z[-1]
z[-c(1, 3)]
names(z)
names(z) <- c("first", "second", "third", "fourth", "fifth")
names(z)
names(z) <- c("first", "second", "third", "fourth", "fifth")
names(z)
z
z["first"]
z[1]
cory <- list(5L,
"Cory Costello",
TRUE)
cory
cory <- c(5L,
"Cory Costello",
TRUE)
cory
cory <- list(5L,
"Cory Costello",
TRUE)
cory
cory <- list(year = 5L,
name = "Cory Costello",
enrollment = TRUE)
cory
names(cory)
cory <- list(year = 5L,
name = "Cory Costello",
enrollment = TRUE,
fave_data = c("strings", "numbers")) # note c() to create a vector
cory
cory[1]
cory[1] * 7
7
cory[[1]]
cory[[1]] * 7
cory["year"]
cory[["year"]]
cory$year
mat <- matrix(data = c(1, 2,  3, 4), # don't have to do two lines, but it looks nice
nrow = 2, # number of rows
ncol = 2, # number of columns
byrow = TRUE) # tell it the order of data above
mat
mat <- matrix(data = c(1, 2, # data in either row-wise or column-wise order
3, 4), # don't have to do two lines, but it looks nice
nrow = 2, # number of rows
ncol = 2, # number of columns
byrow = TRUE) # tell it the order of data above
mat
c1 <- c(1, 3)
c2 <- c(2, 4)
mat <- cbind(c1, c2)
mat
r1 <- c(1, 2)
r2 <- c(3, 4)
mat <- rbind(r1, r2)
mat
rownames(mat)
colnames(mat)
mat <- cbind(c1, c2)
colnames(mat)
r1 <- c(1, 2)
r2 <- c(3, 4)
mat <- rbind(r1, r2)
mat
rownames(mat)
colnames(mat)
colnames(mat) <- c("c1",  "c2")
mat
mixed_mat <- cbind(mat,
c3 = c("a", "b"))
mixed_mat
mat[1, 1]
mat[,2]
mat["r1", "c1"]
mat["r1", 2]
array(c(mat2, mat2*2), dim =c(3, 3, 2))
array(c(mat, mat*2, mat*3), dim =c(2, 2, 3))
mixed_mat
df_1 <- data.frame(mixed_mat)
df_1
df_1 <- data.frame(c1 = c(1, 3),
c2 = c(2, 4),
c3 = c("a", "b"),
row.names = c("r1", "r2"))
df_1
df_1[1, 3]
df_1["r1", "c3"]
df_1[, "c2"]
df_1$c1
df_1$c1[1]
df_1$c1
str(df_1)
?seq
?mean()
mean(mat2)
mean(mat1)
mean(mat)
mean(mat)
vec_w_na <- c(1, 2, 3, 4, 5, 6, NA, 2, 4)
mean(vec_w_na)
mean(vec_w_na, na.rm = TRUE)
sd(vec_w_na, na.rm = TRUE)
sd(vec_w_na)
length(vec_w_na)
nrow(df_2)
ncol(df_2)
nrow(df_1)
ncol(df_1)
nrow(mat)
ncol(mat)
nrow(df_1)
ncol(df_1)
nrow(mat)
ncol(mat)
?sd
sd(x = vec_w_na, na.rm = TRUE)
sd(vec_w_na, TRUE)
sd(na.rm = TRUE, x = vec_w_na)
mean(vec_w_na, TRUE)
mean(vec_w_na, 0, TRUE)
?paste
pretty_mean <- function(data){
mean <- mean(data, na.rm = TRUE)
paste("The Mean is", mean)
}
pretty_mean(vec_w_na)
pretty_mean <- function(data, excited){
mean <- mean(data, na.rm = TRUE)
if(excited == FALSE){paste("The Mean is", mean)}
if(excited == TRUE){paste("The Mean is", mean, "!")}
}
pretty_mean <- function(data, excited = TRUE){
mean <- mean(data, na.rm = TRUE)
if(excited == FALSE){paste("The Mean is", mean)}
if(excited == TRUE){paste("The Mean is", mean, "!")}
}
pretty_meana(vec_w_na)
pretty_mean(vec_w_na)
pretty_mean(vec_w_na, excited = FALSE) # tone it down
pretty_mean(vec_w_na, excited = FALSE) # tone it down
pretty_mean <- function(data, excited = TRUE){
mean <- mean(data, na.rm = TRUE)
if(excited == FALSE){paste("The Mean is", mean)}
if(excited == TRUE){paste("The Mean is", mean, "!")}
}
pretty_mean(vec_w_na)
pretty_mean(vec_w_na, excited = FALSE) # tone it down
pretty_mean <- function(data, excited = TRUE){
mean <- mean(data, na.rm = TRUE)
if(excited == FALSE){x <- paste("The Mean is", mean)}
if(excited == TRUE){x <- paste("The Mean is", mean, "!")}
print(x)
}
pretty_mean(vec_w_na)
pretty_mean(vec_w_na, excited = FALSE) # tone it down
1:length(vec_w_na)
for(i in 1:length(vec_w_na)){
print(paste("The value at index", i, "is", vec_w_na[i]))
}
for(i in 1:length(vec_w_na)){
paste("The value at index", i, "is", vec_w_na[i])
}
install.packages("rio")
update.packages("rio")
library(rio)
library("rio")
search()
library(tidyverse)
search()
?stats::filter
?dplyr::filter
read.txt
getwd()
setwd("C:/Users/coryc3133/OneDrive - University Of Oregon/Work/uoregon_r_bootcamp")
getwd()
setwd("C:/Users/coryc3133")
getwd()
# Add
2 + 3
# subtract
2 - 3
# multiplication
2 * 3
# Division
10/2
# Exponents
4^2
# Roots
4^(1/2)
(2^3)+4*(5/3)
x <- 8
x = 8
x
# Need to assign something to y!
y <- 2
y
# add em up:
x + y
# multiply them
x * y
# define the product as z
z <- x * y
this_is_snake_case <- 8 # a_fine_choice
thisIsCamelCase <- 8 #alsoTotallyWorks
some.maniacs.use.periods <- 8 # probably.best.avoided
And_someTimes.People_doSTRANGEtHiNgS <- 8 # PLEASE NEVER DO ANYTHING LIKE THIS!
typeof(1)
typeof(TRUE)
typeof(1L)
typeof(NA_character_)
typeof(NA)
typeof(NULL)
typeof(NaN)
typeof(Inf)
typeof("one")
x <- 1:5 # sequence of the form starting_number:ending_number
seq()
seq(from = 1, to = 5)
seq(from = 1, to = 5, by = 2)
# We can also assign a vector of values this way
x <- c(2, 8.5, 1, 9)
letters <- c("a", "b", "c", "d")
mixed_vec <- c(x, letters)
mixed_vec
typeof(mixed_vec)
as.numeric(mixed_vec)
z <- 6:10
z[1]
z[1:2]
z[c(1, 3)]
z[-1]
z[-c(1, 3)]
names(z)
names(z) <- c("first", "second", "third", "fourth", "fifth")
names(z)
z
z["first"]
z[1]
cory <- list(5L,
"Cory Costello",
TRUE)
cory
cory <- list(year = 5L,
name = "Cory Costello",
enrollment = TRUE)
cory
names(cory)
cory <- list(year = 5L,
name = "Cory Costello",
enrollment = TRUE,
fave_data = c("strings", "numbers")) # note c() to create a vector
cory
cory[1]
cory[[1]]
cory[[1]] * 7
cory["year"]
cory[["year"]]
cory$year
cory[[4]][2]
cory[["fave_data"]][2]
cory$fave_data[2]
mat <- matrix(data = c(1, 2, # data in either row-wise or column-wise order
3, 4), # don't have to do two lines, but it looks nice
nrow = 2, # number of rows
ncol = 2, # number of columns
byrow = TRUE) # tell it the order of data above
mat
c1 <- c(1, 3)
c2 <- c(2, 4)
mat <- cbind(c1, c2)
mat
r1 <- c(1, 2)
r2 <- c(3, 4)
mat <- rbind(r1, r2)
mat
rownames(mat)
colnames(mat)
colnames(mat) <- c("c1",  "c2")
mat
mixed_mat <- cbind(mat,
c3 = c("a", "b"))
mixed_mat
mat[1, 1]
mat[,2]
mat["r1", "c1"]
mat["r1", 2]
array(c(mat, mat*2, mat*3), dim =c(2, 2, 3))
df_1 <- data.frame(mixed_mat)
df_1
df_1 <- data.frame(c1 = c(1, 3),
c2 = c(2, 4),
c3 = c("a", "b"),
row.names = c("r1", "r2"))
df_1
df_1[1, 3]
df_1["r1", "c3"]
df_1[, "c2"]
df_1$c1
df_1$c1[1]
str(df_1)
seq()
mean(mat)
vec_w_na <- c(1, 2, 3, 4, 5, 6, NA, 2, 4)
mean(vec_w_na)
mean(vec_w_na, na.rm = TRUE)
sd(vec_w_na, na.rm = TRUE)
length(vec_w_na)
nrow(df_1)
ncol(df_1)
nrow(mat)
ncol(mat)
sd(x = vec_w_na, na.rm = TRUE)
sd(vec_w_na, TRUE)
sd(na.rm = TRUE, x = vec_w_na)
mean(vec_w_na, na.rm = TRUE) # or...
mean(vec_w_na, 0, TRUE)
pretty_mean <- function(data){
mean <- mean(data, na.rm = TRUE)
x <- paste("The Mean is", mean)
}
pretty_mean(vec_w_na)
pretty_mean <- function(data, excited = TRUE){
mean <- mean(data, na.rm = TRUE)
if(excited == FALSE){x <- paste("The Mean is", mean)}
if(excited == TRUE){x <- paste("The Mean is", mean, "!")}
print(x)
}
pretty_mean(vec_w_na)
pretty_mean(vec_w_na, excited = FALSE) # tone it down
for(i in 1:length(vec_w_na)){
print(paste("The value at index", i, "is", vec_w_na[i]))
}
library(rio)
library("rio") # also works
search()
library(tidyverse)
search()
getwd()
ps_data <- import("pragmatic_scales_data.csv")
ps_data <- import("data/ps_data.sav")
ps_data
?import
export(ps_data,
"data/ps_data.xlsx")
View(ps_data)
View(ps_data)
head(ps_data)
head(ps_data, n = 20)
tail(ps_data)
str(ps_data)
summary(ps_data)
ps_data[1, 5]
ps_data[1, "condition"]
ps_data[1, 5]
ps_data[1, "condition"]
ps_data[, "condition"]
ps_data$condition
which(ps_data$condition == "Label")
ps_data[which(ps_data$condition == "Label"),]
ps_data[which(ps_data$age >= 2.5),]
str_detect(colnames(ps_data), "^c")
which(str_detect(colnames(ps_data), "^c"))
ps_data[,which(str_detect(colnames(ps_data), "^c"))]
ps_data[which(ps_data$condition == "Label" & ps_data$age < 3),]
ps_data[which(ps_data$item == "faces" | ps_data$item == "houses"),]
mean(age)
mean(ps_data$age)
select(ps_data, age)
select(ps_data, age, condition)
select(ps_data, 1)
select(ps_data, 1:3)
select(ps_data, -age)
select(ps_data, -5)
select(ps_data, -age)
select(ps_data, -5)
# select first three:
select(ps_data, 1:3)
# de-select last three:
select(ps_data, -(1:3))
# de-select last three:
select(ps_data, -1:3)
# de-select last three:
select(ps_data, -(1:3))
# select first three
select(ps_data, subid:correct)
# deselect first three
select(ps_data, -(subid:correct))
select(ps_data, starts_with("c"))
ps_data[,which(str_detect(colnames(ps_data), "^c"))]
select(ps_data, ends_with("e"))
select(ps_data, contains("i"))
filter(ps_data, condition == "No Label")
filter(ps_data, condition == "No Label" & age <= 3)
filter(ps_data, condition == "Label" | age <= 3)
filter(ps_data, between(age, 2.1, 2.5))
ps_data$age %>% # LHS is age vector from ps_data
mean() # pass that to the mean function
ps_data %>% # take the data, then...
select(age) %>%  # select age, then...
mean() # take the mean
ps_data %>% # take the data, then...
select(age) %>%  # select age, then...
mean() # take the mean
unique(select(filter(ps_data, age > 2.5 | age < 3.2), age, subid))
ps_data %>% # take the data, then...
filter(age > 2.5 | age > 3.2) %>% # filter for kids between 2.5 and 3.2, then...
select(subid, centered_age) %>% # select subject id and centered age, then...
unique() # get unique rows
ps_data %>% # take the data, then...
filter(age > 2.5 | age > 3.2) %>% # filter for kids between 2.5 and 3.2, then...
select(subid, age) %>% # select subject id and centered age, then...
unique() # get unique rows
unique_filtered_data <- ps_data %>% # take the data, then...
filter(age > 2.5 | age > 3.2) %>% # filter for kids between 2.5 and 3.2, then...
select(subid, centered_age) %>% # select subject id and centered age, then...
unique() # get unique rows
unique_filtered_data <- ps_data %>% # take the data, then...
filter(age > 2.5 | age > 3.2) %>% # filter for kids between 2.5 and 3.2, then...
select(subid, age) %>% # select subject id and centered age, then...
unique() # get unique rows
ps_data %>%
filter(age == 4) %>%
select(correct) %>%
sum()
ps_data %>%
filter(age == 4) %>%
select(correct)
ps_data %>%
filter(age >= 4) %>%
select(correct) %>%
sum()
ps_data %>%
filter(age >= 4) %>%
select(correct)
ps_data %>%
filter(age >= 4) %>%
select(correct) %>%
sum()
x <- 1:20
x[3]*5
ps_data <- import("pragmatic_scales_data.csv")
library(rio)
ps_data <- import("pragmatic_scales_data.csv")
ps_data %>%
filter(age > 2) %>%
select(correct)
library(tidyverse)
ps_data %>%
filter(age > 2) %>%
select(correct)
starwars
starwars %>%
select(name, eye_color)
starwars %>%
select(name, homeworld)
star_wars %>%
select(name:homeworld)
starwars %>%
select(name:homeworld)
starwars %>%
select(contains("color"))
starwars %>%
select(homeworld, name, everything())

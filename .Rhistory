filter(age > 2, age < 3)
ps_data %>%
filter(age > 2 & age < 3)
ps_data <- ps_data %>%
mutate(age_group = cut(age, 2:5, include.lowest = TRUE))
head(ps_data)
ps_data <- ps_data %>%
mutate(age_group = cut(age, 2:5, include.lowest = TRUE))
head(ps_data)
ps_data <- ps_data %>%
mutate(age_c = age - mean(age, na.rm = TRUE)))
ps_data <- ps_data %>%
mutate(age_c = age - mean(age, na.rm = TRUE))
head(ps_data)
ps_data %>%
arrange(age)
ps_data %>%
arrange(desc(age))
# Load the packages (tell R that you want to use its functions)
library(tidyverse)
library(rio)
ps_data <- import("pragmatic_scales_data.csv")
sum(select(ps_data, age))
# becomes...
ps_data %>%
select(age) %>%
sum()
# This mess:
summarize(group_by(distinct(ps_data, sub_id, .keep_all = TRUE), condition), mean_age = mean(age, na.rm = TRUE))
# Becomes this:
ps_data %>% # take the ps_data, then...
distinct(subid, .keep_all = TRUE) %>% # keep distinct subjects, then...
group_by(condition) %>% # group by condition, then...
summarize(mean_age = mean(age, na.rm = TRUE)) # return the mean age (per group)
ps_data %>%
filter(age >= 2 & age =< 3)
# summarize without grouping
ps_data %>%
summarise(correct_mean = mean(correct),
correct_sd = sd(correct),
n_observations = length(subid))
#grouped by age_group and condition
ps_data %>%
group_by(age_group, condition) %>%
summarise(correct_mean = mean(correct),
correct_sd = sd(correct),
n_observations = length(subid))
#grouped by age_group and condition
ps_data %>%
group_by(condition) %>%
summarise(correct_mean = mean(correct),
correct_sd = sd(correct),
n_observations = length(subid))
# summarize without grouping
ps_data %>%
summarise(correct_mean = mean(correct),
correct_sd = sd(correct),
n_observations = length(subid))
#grouped by age_group and condition
ps_data %>%
group_by(condition) %>%
summarise(correct_mean = mean(correct),
correct_sd = sd(correct),
n_observations = length(subid))
ps_data %>%
group_by(stimuli, condition, subid) %>%
summarise(correct_mean = mean(correct),
n_observations = length(subid))
ps_data %>%
group_by(item, condition, subid) %>%
summarise(correct_mean = mean(correct),
n_observations = length(subid))
ps_sub_means <- ps_data %>%
group_by(condition, subid) %>%
summarise(correct_mean = mean(correct),
n_observations = length(subid))
ps_means <- ps_sub_means %>%
group_by(condition) %>%
summarise(correct_sd = sd(correct_mean),
correct_cond_mean = mean(correct_mean),
n_subs = length(subid))
ps_means
ps_sub_means
ps_sub_means <- ps_data %>%
group_by(condition, subid) %>%
summarise(correct_mean = mean(correct),
n_observations = length(subid))
ps_sub_means
ps_means <- ps_sub_means %>%
group_by(condition) %>%
summarise(correct_sd = sd(correct_mean),
correct_cond_mean = mean(correct_mean),
n_subs = length(subid))
ps_means
ps_means <- ps_sub_means %>%
group_by(condition) %>%
summarise(correct_sd = sd(correct_mean),
correct_mean = mean(correct_mean),
n_subs = length(subid))
ps_means
ps_means <- ps_sub_means %>%
ps_data %>%  group_by(condition) %>%
summarise(correct_sd = sd(correct_mean),
correct_mean = mean(correct_mean),
n_subs = length(subid))
ps_data %>%  group_by(condition) %>%
summarise(correct_sd = sd(correct_mean),
correct_mean = mean(correct_mean),
n_subs = length(subid))
ps_data %>%  group_by(condition) %>%
summarise(correct_sd = sd(correct_mean),
correct_mean = mean(correct_mean),
n_subs = length(subid))
ps_means <- ps_sub_means %>%
group_by(condition) %>%
summarise(correct_sd = sd(correct_mean),
correct_mean = mean(correct_mean),
n_subs = length(subid))
ps_means
ps_data %>%
group_by(condition, subid) %>%
summarise(correct_mean = mean(correct),
correct_sd = sd(correct)
n_observations = length(subid))
ps_data %>%
group_by(condition) %>%
summarise(correct_mean = mean(correct),
correct_sd = sd(correct)
n_observations = length(subid))
ps_data %>%
group_by(condition) %>%
summarise(correct_mean = mean(correct),
correct_sd = sd(correct),
n_observations = length(subid))
ps_means
ps_data %>%
group_by(condition) %>%
summarise(correct_mean = mean(correct),
correct_sd = sd(correct),
n_observations = length(subid))
ps_means
?table1 #let's learn about the datset
table1 #this dataset is tidy!
table4a
table4a
table4a
table4a %>%
gather(`1999`, `2000`, key = "year", value = "cases")
table4b #check it out
table4b %>%
gather(`1999`, `2000`)
?gather
table4b %>%
gather(`1999`, `2000`, key = "year", value = "population")
tidy4a <- table4a %>%
gather(`1999`, `2000`, key = "year", value = "cases")
tidy4b <- table4b %>%
gather(`1999`, `2000`, key = "year", value = "population")
left_join(tidy4a, tidy4b) #note that R tells you which columns were matched
table2
table2
table2 %>%
spread(key = type, value = count)
ps_data %>%
spread(item, corect)
ps_data %>%
spread(item, correct)
?table1
table2
table3
table4a
table4b
?unite
starwars
starwars %>%
separate(col = name, into = c("first_name", "last_name"))
starwars %>%
separate(col = name, into = c("first_name", "last_name"))
starwars
starwars %>%
separate(col = name, into = c("first_name", "last_name"))
starwars %>%
separate(name, c("first_name", "last_name"), sep = " ")
starwars_2 <- starwars %>%
separate(col = name, into = c("first_name", "last_name"))
starwars_formal <- starwars %>%
separate(col = name, into = c("first_name", "last_name"))
starwars_sep_names <- starwars %>%
separate(col = name, into = c("first_name", "last_name"))
starwars_sep_names
?separate
?unite
starwars_sep_names %>%
unite(name, first_name, last_name)
starwars_sep_names <- starwars %>%
separate(name, c("first_name", "last_name"), sep = " ")
starwars_sep_names
starwars_sep_names %>%
unite(name, first_name, last_name)
?separate
starwars_sep_names %>%
unite(name, first_name, last_name, na.rm = TRUE)
ps_data
ps_data %>%
separate(age, c("years", "year_frac"))
mtcars
quakes
data()
mdeaths
tress
trees
storms
band_members
band_instruments
band_instruments2
diamonds
presidential
fruit
table5
population
smith
smiths
who
euro
EuStockMarkets
Orange
USJudgeRatings
starwars_sep_names %>%
unite(col = name, first_name, last_name)
starwars_sep_names %>%
unite(col = name, first_name, last_name, sep = " ") %>%
mutate(name = str_remove_all("NA"))
starwars_sep_names %>%
unite(col = name, first_name, last_name, sep = " ") %>%
mutate(name = str_remove_all(name, "NA"))
?iris #first, let's learn about the dataset
?iris #first, let's learn about the dataset
?iris #first, let's learn about the dataset
head(iris)
?ggplot
?ggplot
ggplot()
ggplot(data = iris)
?ggplot
ps_data %>%
filter(age >= 2 & age =< 3)
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Length, y = Petal.Length))
ggplot(data = iris) +
geom_histogram(mapping = aes(x = Sepal.Length))
ggplot(data = iris) + # attach data
geom_histogram(mapping = aes(x = Sepal.Length)) # add geom w/ aesthetic map
ggplot(data = iris) + # attach data
geom_point(mapping = aes(x = Sepal.Length)) # add geom w/ aesthetic map
# Load the packages (tell R that you want to use its functions)
library(tidyverse)
library(rio)
ps_data <- import("pragmatic_scales_data.csv")
sum(select(ps_data, age))
# becomes...
ps_data %>%
select(age) %>%
sum()
# This mess:
summarize(group_by(distinct(ps_data, sub_id, .keep_all = TRUE), condition), mean_age = mean(age, na.rm = TRUE))
# Becomes this:
ps_data %>% # take the ps_data, then...
distinct(subid, .keep_all = TRUE) %>% # keep distinct subjects, then...
group_by(condition) %>% # group by condition, then...
summarize(mean_age = mean(age, na.rm = TRUE)) # return the mean age (per group)
ps_data %>%
filter(age >= 2 & age <= 3)
#get ONLY the subid, age, and correct columns
ps_data %>%
select(subid, age, correct)
ps_data <- ps_data %>%
mutate(age_c = age - mean(age, na.rm = TRUE))
head(ps_data)
ps_data %>%
arrange(age)
ps_data %>%
arrange(desc(age))
# summarize without grouping
ps_data %>%
summarise(correct_mean = mean(correct),
correct_sd = sd(correct),
n_observations = length(subid))
#grouped by age_group and condition
ps_data %>%
group_by(condition) %>%
summarise(correct_mean = mean(correct),
correct_sd = sd(correct),
n_observations = length(subid))
ps_sub_means <- ps_data %>%
group_by(condition, subid) %>%
summarise(correct_mean = mean(correct),
n_observations = length(subid))
ps_sub_means
ps_means <- ps_sub_means %>%
group_by(condition) %>%
summarise(correct_sd = sd(correct_mean),
correct_mean = mean(correct_mean),
n_subs = length(subid))
ps_means
?table1 #let's learn about the datset
table1 #this dataset is tidy!
table4a
table4a %>%
gather(`1999`, `2000`, key = "year", value = "cases")
table4b #check it out
table4b %>%
gather(`1999`, `2000`, key = "year", value = "population")
tidy4a <- table4a %>%
gather(`1999`, `2000`, key = "year", value = "cases")
tidy4b <- table4b %>%
gather(`1999`, `2000`, key = "year", value = "population")
left_join(tidy4a, tidy4b) #note that R tells you which columns were matched
table2
table2 %>%
spread(key = type, value = count)
ps_data %>%
spread(item, correct)
starwars %>%
separate(col = name, into = c("first_name", "last_name"))
starwars_sep_names <- starwars %>%
separate(name, c("first_name", "last_name"), sep = " ")
starwars_sep_names
starwars_sep_names %>%
unite(col = name, first_name, last_name)
starwars_sep_names %>%
unite(col = name, first_name, last_name, sep = " ") %>%
mutate(name = str_remove_all(name, "NA")) # overwrite name with
# name with NAs removed
ggplot(data = iris)
ggplot(data = iris) + # attach data
geom_histogram(mapping = aes(x = Sepal.Length)) # add geom w/ aesthetic map
ggplot(data = iris) + # attach data
geom_point(mapping = aes(x = Sepal.Length)) # add geom w/ aesthetic map
ggplot(data = iris) + # attach data
geom_point(mapping = aes(x = Sepal.Length, y = Petal.Length)) # add geom w/ aesthetic map
ggplot(data = iris) + # attach data
geom_point(mapping = aes(x = Sepal.Length, y = Petal.Length)) # add geom w/ aesthetic map
x <- 1:20
x
x[3:4] <- x[3:4]*5
library(tidyverse)
library(rio)
search()
library(rio)
getwd()
setwd("C:/Users/Coryc/OneDrive - University Of Oregon/Work")
getwd()
setwd("./uoregon_r_bootcamp")
getwd()
setwd("..")
getwd()
setwd("./uoregon_r_bootcamp")
getwd()
library(rio)
ps_data <- import("pragmatic_scales_data.csv")
ps_data <- import("pragmatic_scales_data.csv")
ps_data <- import("data/ps_data.sav")
View(ps_data)
View(ps_data)
View(ps_data)
ps_data <- import("https://raw.githubusercontent.com/Coryc3133/uoregon_r_bootcamp/master/pragmatic_scales_data.csv")
export(ps_data,
"data/ps_data.xlsx")
ps_data_spss <- import("data/ps_data.sav")
another_df <- import("another_data_set.csv")
export(another_df,
"data/another_data_set.csv")
another_df <- export(another_df,
"data/another_data_set.sav")
another_df <- import("data/another_data_set.sav")
View(ps_data)
view(ps_data)
View(another_df)
head(ps_data)
head(ps_data, n = 20)
tail(ps_data)
str(ps_data)
another_df <- import("data/another_data_set.sav")
ps_data <- import("data/ps_data.sav")
str(ps_data)
ps_data <- import("https://raw.githubusercontent.com/Coryc3133/uoregon_r_bootcamp/master/pragmatic_scales_data.csv")
summary(ps_data)
ps_data[, "subid"]
select(ps_data, age)
select(ps_data, age, condition)
select(ps_data, 1)
select(ps_data, -age)
select(ps_data, -5)
# select first three:
select(ps_data, 1:3)
# de-select last three:
select(ps_data, -(1:3)) # - requires parenthetical sequence
# de-select last three:
select(ps_data, -1:3) # - requires parenthetical sequence
# de-select last three:
select(ps_data, -(1:3)) # - requires parenthetical sequence
# select first three
select(ps_data, subid:correct)
# deselect first three
select(ps_data, -(subid:correct))
select(ps_data, starts_with("c"))
select(ps_data, ends_with("e"))
select(ps_data, contains("i"))
select(ps_data, contains("e"))
filter(ps_data, condition == "No Label")
filter(ps_data, condition == "No Label" & age <= 3)
filter(ps_data, condition == "Label" | age <= 3)
filter(ps_data, between(age, 2.1, 2.5))
filter(ps_data, between(age, 3, 4))
sum(ps_data$age)
ps_data$age %>% # LHS is age vector from ps_data
sum() # pass that to the sum function
ps_data$age %>% # LHS is age vector from ps_data
sum() # pass that to the sum function
ps_data %>% # take the data, then...
select(age) %>%  # select age, then...
sum() # take the sum
ps_data %>% select(age) %>% sum()
ps_data %>%
select(age) %>%
sum()
unique(select(filter(ps_data, age > 2.5 | age < 3.2), age, subid))
unique(select(filter(ps_data, age > 2.5 | age < 3.2), age, subid))
ps_data %>% # take the data, then...
filter(age > 2.5 | age > 3.2) %>% # filter for kids between 2.5 and 3.2, then...
select(subid, age) %>% # select subject id and centered age, then...
unique() # get unique rows
unique_filtered_data <- ps_data %>% # take the data, then...
filter(age > 2.5 | age > 3.2) %>% # filter for kids between 2.5 and 3.2, then...
select(subid, age) %>% # select subject id and centered age, then...
unique() # get unique rows
ps_data %>%
filter(age >= 4) %>%
select(correct) %>%
sum()
ps_data %>%
filter(age >= 4 & correct == 1)
# or
ps_data %>%
filter(age >= 4 & correct == 1) %>%
nrow()
starwars
starwars %>%
select(name, homeworld)
starwars %>%
select(name:homeworld)
starwars %>%
select(contains("color"))
starwars %>%
select(homeworld, name, everything())
search()
data()
data()
data()
seals
starwars %>%
select(starts_with("h"), everything())
starwars
select
starwars %>%
filter(height < 100)
starwars %>%
filter(height > mean(height, na.rm = TRUE) + sd(height, na.rm = TRUE)) # don't forget na.rm!
starwars %>%
filter(mass == NA)
starwars %>%
filter(is.na(mass)) # note you wrap the variable in is.na()
starwars %>%
filter(!is.na(mass))
!TRUE
!FALSE
! 5 == 5
! 5 == 4
starwars %>%
filter(height > mean(height, na.rm = TRUE) + sd(height, na.rm = TRUE) &
mass < mean(mass, na.rm = TRUE))
starwars %>%
filter(height > mean(height, na.rm = TRUE) + sd(height, na.rm = TRUE) |
height < mean(height, na.rm = TRUE) + sd(height, na.rm = TRUE))
starwars %>%
filter(hair_color == "grey")
starwars %>%
filter(hair_color == "grey" |
hair_color == "brown")
starwars %>%
filter(hair_color == "grey" |
hair_color == "brown")
starwars %>%
filter(hair_color != "brown")
starwars %>%
filter(str_detect(hair_color, "grey")) # first argument is string var,
starwars %>%
filter(!str_detect(hair_color, "grey"))
starwars %>%
filter(birth_year >= 200)
starwars %>%
filter(birth_year >= 200)
starwars %>%
filter(!str_detect(eye_color, "blue")) %>%
select(name, eye_color, species)
starwars %>%
filter(!str_detect(eye_color, "blue")) %>%
select(name, eye_color, species)
starwars %>%
filter(species == "Droid" & homeworld == "Tatooine" |
species == "Human" & homeworld == "Naboo") %>%
select(name, homeworld, species, ends_with("color"))

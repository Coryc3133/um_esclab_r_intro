cory
names(cory)
cory <- list(year = 5L,
name = "Cory Costello",
enrollment = TRUE,
fave_data = c("strings", "numbers")) # note c() to create a vector
cory
cory[1]
cory[[1]]
cory[[1]] * 7
cory["year"]
cory[["year"]]
cory$year
cory[[4]][2]
cory[["fave_data"]][2]
cory$fave_data[2]
cory$year[2] <- cory$year*7
cory$year
mat <- matrix(data = c(1, 2, # data in either row-wise or column-wise order
3, 4), # don't have to do two lines, but it looks nice
nrow = 2, # number of rows
ncol = 2, # number of columns
byrow = TRUE) # tell it the order of data above
mat
c1 <- c(1, 3)
c2 <- c(2, 4)
mat <- cbind(c1, c2)
mat
r1 <- c(1, 2)
r2 <- c(3, 4)
mat <- rbind(r1, r2)
mat
rownames(mat)
colnames(mat)
colnames(mat) <- c("c1",  "c2")
mat
mixed_mat <- cbind(mat,
c3 = c("a", "b"))
mixed_mat
mat[1, 1]
mat[,2]
mat["r1", "c1"]
mat["r1", 2]
mat2 <- matrix(c(1, 2, 3,
4, 5, 6,
7, 8, 9),
nrow = 3,
byrow = TRUE)
mat2[,1] + mat2[,3]
mat2[3,] * mat2[2, 2]
array(c(mat2, mat2*2), dim =c(3, 3, 2))
df_1 <- data.frame(mixed_mat)
df_1
df_1 = data.frame(c1 = c(1, 3),
c2 = c(2, 4),
c3 = c("a", "b"),
row.names = c("r1", "r2"))
df_1[1, 3]
df_1["r1", "c3"]
df_1[, "c2"]
df_1$c1
df_1$c1[1]
str(df_1)
df_2 <- data.frame(c1 = c(1, 2, 3),
c2 = c(2, 4, 6),
c3 = c("a", "b", "c"))
str(df_2)
df_2$c1 + df_2$c2
df_2[1,] + df_2[2,]
seq()
mean(mat2)
vec_w_na <- c(1, 2, 3, 4, 5, 6, NA, 2, 4)
mean(vec_w_na)
mean(vec_w_na, na.rm = TRUE)
sd(vec_w_na, na.rm = TRUE)
length(vec_w_na)
nrow(df_2)
ncol(df_2)
nrow(mat)
ncol(mat)
sd(x = vec_w_na, na.rm = TRUE)
sd(vec_w_na, TRUE)
sd(na.rm = TRUE, x = vec_w_na)
pretty_mean <- function(data){
mean <- mean(data, na.rm = TRUE)
paste("The Mean is", mean)
}
pretty_mean(vec_w_na)
pretty_mean <- function(data){
mean <- sd(data, na.rm = TRUE)
paste("The SD is", mean)
}
pretty_mean(vec_w_na)
for(i in 1:length(vec_w_na)){
print(paste("The value at index", i, "is", vec_w_na[i]))
}
for(i in 1:length(vec_w_na)){
print(vec_w_na[i]/5)
}
library(rio)
search()
library(tidyverse)
search()
getwd()
# Now, let's read in the pragmatic_scales_data CSV file and save it as an object called ps_data
ps_data <- import("pragmatic_scales_data.csv")
ps_data
var_1 <- 4
var_2 <- var_1^6
var_1
var_2
# define the product as z
z <- x * y
as.numeric(b) + x
cory$name
cory$year[2] <- cory$year*7
cory$year
mat <- matrix(data = c(1, 2, # data in either row-wise or column-wise order
3, 4), # don't have to do two lines, but it looks nice
nrow = 2, # number of rows
ncol = 2, # number of columns
byrow = TRUE) # tell it the order of data above
mat
# Add
2 + 3
# subtract
2 - 3
# multiplication
2 * 3
# Division
10/2
# Exponents
4^2
# Roots
4^(1/2)
(2^3)+4*(5/3)
x <- 8
x = 8
x
# Need to assign something to y!
y <- 2
y
# add em up:
x + y
# multiply them
x * y
# define the product as z
z <- x * y
this_is_snake_case <- 8 # a_fine_choice
thisIsCamelCase <- 8 #alsoTotallyWorks
some.maniacs.use.periods <- 8 # probably.best.avoided
And_someTimes.People_doSTRANGEtHiNgS <- 8 # PLEASE NEVER DO ANYTHING LIKE THIS!
var_1 <- 4
var_2 <- var_1^6
var_1
var_2
typeof(1)
typeof(TRUE)
typeof(1L)
typeof(NA_character_)
typeof(NA)
typeof(NULL)
typeof(NaN)
typeof(Inf)
typeof("one")
x <- 1:5 # sequence of the form starting_number:ending_number
?seq
seq()
seq(from = 1, to = 5)
seq(from = 1, to = 5, by = 2)
# We can also assign a vector of values this way
x <- c(2, 8.5, 1, 9)
letters <- c("a", "b", "c", "d")
mixed_vec <- c(x, letters)
mixed_vec
typeof(mixed_vec)
as.numeric(mixed_vec)
x <- 8
y <- seq(from = 2, to = 16, by = 2)
x + y
z <- c(5, 10)
q <- seq(from = 5, to = 25, by = 5)
q*z
b <- "8"
typeof(x)
typeof(y)
typeof(q)
typeof(z)
typeof(b)
as.numeric(b) + x
q[1]
q[1:2]
q[c(1, 3)]
names(q)
names(q) <- c("first", "second", "third", "fourth", "fifth")
names(q)
q["first"]
q[1]
named <- 1:5
names(named) <- c("a", "b", "c", "d", "e")
named[1]
named["e"]
cory <- list(5L,
"Cory Costello",
TRUE)
cory
cory <- list(year = 5L,
name = "Cory Costello",
enrollment = TRUE)
cory
names(cory)
cory <- list(year = 5L,
name = "Cory Costello",
enrollment = TRUE,
fave_data = c("strings", "numbers")) # note c() to create a vector
cory
cory[1]
cory[[1]]
cory[[1]] * 7
cory["year"]
cory[["year"]]
cory$year
cory <- list(year = 5L,
name = "Cory Costello",
enrollment = TRUE,
fave_data = c("strings", "numbers")) # note c() to create a vector
cory$name
cory[[4]][2]
cory[["fave_data"]][2]
cory$fave_data[2]
cory$year[2] <- cory$year*7
cory$year
mat <- matrix(data = c(1, 2, # data in either row-wise or column-wise order
3, 4), # don't have to do two lines, but it looks nice
nrow = 2, # number of rows
ncol = 2, # number of columns
byrow = TRUE) # tell it the order of data above
mat
c1 <- c(1, 3)
c2 <- c(2, 4)
mat <- cbind(c1, c2)
mat
r1 <- c(1, 2)
r2 <- c(3, 4)
mat <- rbind(r1, r2)
mat
rownames(mat)
colnames(mat)
colnames(mat) <- c("c1",  "c2")
mat
mixed_mat <- cbind(mat,
c3 = c("a", "b"))
mixed_mat
mat[1, 1]
mat[,2]
mat["r1", "c1"]
mat["r1", 2]
mat2 <- matrix(c(1, 2, 3,
4, 5, 6,
7, 8, 9),
nrow = 3,
byrow = TRUE)
mat2[,1] + mat2[,3]
mat2[3,] * mat2[2, 2]
array(c(mat2, mat2*2), dim =c(3, 3, 2))
df_1 <- data.frame(mixed_mat)
df_1
df_1 = data.frame(c1 = c(1, 3),
c2 = c(2, 4),
c3 = c("a", "b"),
row.names = c("r1", "r2"))
df_1[1, 3]
df_1["r1", "c3"]
df_1[, "c2"]
df_1$c1
df_1$c1[1]
str(df_1)
df_2 <- data.frame(c1 = c(1, 2, 3),
c2 = c(2, 4, 6),
c3 = c("a", "b", "c"))
str(df_2)
df_2$c1 + df_2$c2
df_2[1,] + df_2[2,]
seq()
mean(mat2)
vec_w_na <- c(1, 2, 3, 4, 5, 6, NA, 2, 4)
mean(vec_w_na)
mean(vec_w_na, na.rm = TRUE)
sd(vec_w_na, na.rm = TRUE)
length(vec_w_na)
nrow(df_2)
ncol(df_2)
nrow(mat)
ncol(mat)
sd(x = vec_w_na, na.rm = TRUE)
sd(vec_w_na, TRUE)
sd(na.rm = TRUE, x = vec_w_na)
pretty_mean <- function(data){
mean <- mean(data, na.rm = TRUE)
paste("The Mean is", mean)
}
pretty_mean(vec_w_na)
pretty_mean <- function(data){
mean <- sd(data, na.rm = TRUE)
paste("The SD is", mean)
}
pretty_mean(vec_w_na)
for(i in 1:length(vec_w_na)){
print(paste("The value at index", i, "is", vec_w_na[i]))
}
for(i in 1:length(vec_w_na)){
print(vec_w_na[i]/5)
}
update.packages("rio")
?import
library(rio)
library(tidyverse)
# Now, let's read in the pragmatic_scales_data CSV file and save it as an object called ps_data
ps_data <- import("pragmatic_scales_data.csv")
export(ps_data, "data/ps_data.sav")
ps_data <- import("data/pragmatic_scales_data.sav")
ps_data <- import("data/ps_data.sav")
?import
?export()
export(ps_data,
"data/ps_data.xlsx")
View(ps_data)
View(ps_data)
head(ps_data)
head(ps_data, n = 20)
tail(ps_data)
str(ps_data)
summary(ps_data)
another_df <- import("another_data_set.csv")
another_df <- export("data/another_data_set.csv")
another_df <- export(another_df,
"data/another_data_set.csv")
export(another_df,
"data/another_data_set.csv")
export(another_df,
"data/another_data_set.csv")
another_df <- import("another_data_set.csv")
export(another_df,
"data/another_data_set.csv")
another_df <- export(another_df,
"data/another_data_set.sav")
another_df <- import("data/another_data_set.sav")
ps_data[1, 3]
ps_data[1, "label"]
ps_data[1, 4]
ps_data[1, 5]
ps_data[1, "condition"]
ps_data[, "condition"]
ps_data[, which(ps_data$condition == "Label")]
ps_data[, ps_data$condition == "Label"]
ps_data[, which(ps_data$condition == "Label")]
ps_data[which(ps_data$condition == "Label"),]
df$condition
ps_data$condition
which(ps_data$condition == "Label")
ps_data[which(ps_data$condition == "Label"),]
ps_data[which(ps_data$age >= 2.5),]
ps_data[, str_detect(colnames(ps_data), "^c")]
ps_data[which(ps_data$condition == "Label" & ps_data$age < 3),]
ps_data[which(ps_data$item == "faces" | ps_data$item == "faces",]
ps_data[which(ps_data$item == "faces" | ps_data$item == "houses"),]
ps_data[1:10, "item"]
ps_data[which(ps_data$age >= 3.5 & ps_data$item == "faces"),]
ps_data[,which(str_detect(col_names(ps_data), "^c"))]
ps_data[,which(str_detect(colnames(ps_data), "^c"))]
ps_data[,which(str_detect(colnames(ps_data), "^s") |
str_detect(colnames(ps_data), "^a"))]
mean(age)
mean(ps_data$age)
ps_data$centered_age <- ps_data$age - mean(ps_data$age)
ps_data$centered_age
ps_data$age %>% # LHS is age vector from ps_data
mean() # pass that to the mean function
mixed_mat %>%
as.numeric() %>%
mean()
mixed_mat %>% # then...
as.numeric() %>% # then...
mean()
mixed_mat %>% # then...
as.numeric() %>% # then...
mean(na.rm = TRUE)
mean(as.numeric(mixed_mat), na.rm = TRUE)
mixed_mat %>% # then...
as.numeric() %>% # then...
mean(na.rm = TRUE)
?select
starwars
?select
select(ps_data, age)
select(ps_data, age, condition)
select(ps_data, 1)
select(ps_data, 1:3)
ps_data
select(ps_data, centered_age)
select(ps_data, -centered_age)
select(ps_data, -5)
select(ps_data, -6)
select(ps_data, 1:3)
# de-select last three:
select(ps_data, -(1:3))
# select first three:
select(ps_data, 1:3)
select(ps_data, sub_id:correct)
select(ps_data, subid:correct)
# select last three
select(ps_data, -(subid:correct))
select(ps_data, starts_with("c"))
ps_data[,str_detect(which(colnames), "^c")]
ps_data[,which(str_detect(colnames, "^c")]
ps_data[,which(str_detect(colnames(ps_data), "^c")]
ps_data[,which(str_detect(colnames(ps_data), "^c"))]
select(ps_data,
contains("a"))
filter(ps_data, 1:5)
filter(ps_data, condition == "No Label")
filter(ps_data, condition == "No Label" & age <= 3)
filter(ps_data, condition == "Label" | age <= 3)
ps_data
ps_data %>% table()
ps_data$age %>% table()
filter(ps_data, between(age, 2.1, 2.5))
ps_data %>% # take the data, then...
select(age) %>%  # select age, then...
mean()
?select
select(filter(ps_data, age > 2.5 | age < 3.2), centered_age, condition))
select(filter(ps_data, age > 2.5 | age < 3.2), centered_age, condition)
data_subset_age_age_cond <- select(data_subset_age, centered_age, condition)
ps_data %>%
filter(age > 2.5 | age > 3.2)
ps_data %>% # take the data, then...
filter(age > 2.5 | age > 3.2) %>% # filter for kids between 2.5 and 3.2
select(condition, centered_age)
ps_data %>% # take the data, then...
filter(age > 2.5 | age > 3.2) %>% # filter for kids between 2.5 and 3.2, then...
select(condition, centered_age) # select condition and centered age
unique(select(filter(ps_data, age > 2.5 | age < 3.2), centered_age, subid))
data_subset_age_ids <- select(data_subset_age, centered_age, subid)
data_subset_age <- filter(ps_data, age > 2.5 | age > 3.2)
data_subset_age_ids <- select(data_subset_age, centered_age, subid)
unique(data_subset_age_ids)
ps_data %>% # take the data, then...
filter(age > 2.5 | age > 3.2) %>% # filter for kids between 2.5 and 3.2, then...
select(subid, centered_age) %>% # select subject id and centered age, then...
unique() # get unique rows
another_df$age
another_df %>%
filter(age >= 4) %>%
select(correct) %>%
mean()
another_df %>%
filter(age >= 4) %>%
select(correct) %>%
mean(na/rm = TRUE)
another_df %>%
filter(age >= 4) %>%
select(correct) %>%
mean(na.rm = TRUE)
another_df %>%
filter(age >= 4) %>%
select(correct)
another_df %>%
filter(age >= 4) %>%
select(correct) %>%
mean()
another_df %>%
filter(age >= 4) %>%
select(correct) %>%
as.numeric() %>%
mean()
another_df %>%
filter(age >= 4) %>%
select(correct) %>% typeof()
another_df %>%
filter(age >= 4) %>%
select(correct) %>%
sum()
another_df %>%
filter(age >= 4) %>%
select(correct)
another_df %>%
filter(age >= 4) %>%
select(correct) %>%
sum()
# or
another_df %>%
filter(age >= 4 & correct == 1) %>%
length()
another_df %>%
filter(age >= 4) %>%
select(correct) %>%
sum()
another_df %>%
filter(age >= 4 & correct == 1)
# or
another_df %>%
filter(age >= 4 & correct == 1) %>%
nrow()
another_df %>%
filter(age >= 4 & correct == 1)
ps_data %>%
filter(between(age, 3, 4))
ps_data %>%
filter(age >= 3 | age <= 4)
ps_data %>%
filter(age >= 3 & age <= 4)

dir()
# Load the package (tell R that you want to use its functions)
library("tidyverse")
# indenting makes things even easier to read
ps_data$age %>%
unique %>%
mean
install.packages("DT")
install.packages("swirl")
# Exponents
4^2
# Exponents
4^(1/2)
# Roots
4^(1/2)
(2^3)+4*(5/3)
(2^3)
(2^3)+4
(2^3)+4*(5/3)
4*(5/3)
(2^3)+4
12* (5/3)
# Create a variable called x, that is assigned the number 8.
x <- 8
x = 8
x <- 8
x = 8
# What value did I assign to x?
x
x
# Call Y
y
# Need to assign something to y!
y <- 2
y
# define the product as z
z <- x * y
z
?mean.numeric
typeof(x)
typeof(c(1, 2))
# Can also assign a range of values
x <- 1:5 #x is now a vector of 1, 2, 3, 4, 5
x <- 1:5 # x is now a vector of 1, 2, 3, 4, 5
# We can also assign a vector of values this way
x <- c(2, 8, 1, 9)
?seq
?seq
seq()
seq()
seq(from = 1, to = 5)
seq(from = 1, to = 5, by = 2)
seq(from = 1, to = 5, by = 2)
x <- seq(from = 1, to = 5, by = 2)
seq(from = 1, to = 5, by = 2)
# We can also assign a vector of values this way
x <- c(2, 8, 1, 9)
1.2:2.3
# We can also assign a vector of values this way
x <- c(2, 8.5, 1, 9)
letters <- c("a", "b", "c", "d")
c(x, letters)
x <- 8
y <- seq(2, 16, 2)
x*y
x + "a"
b <- "8"
x + b
x
x <- 8
y <- seq(from = 2, to = 16, by = 2)
x + y
q <- seq(from = 5, to = 25, by = 5)
z <- c(5, 10)
q*z
# Add
2 + 3
# subtract
2 - 3
# multiplication
2 * 3
# Division
10/2
# Exponents
4^2
# Roots
4^(1/2)
(2^3)+4*(5/3)
x <- 8
x = 8
x
# Need to assign something to y!
y <- 2
y
# add em up:
x + y
# multiply them
x * y
# define the product as z
z <- x * y
this_is_snake_case <- 8 # a_fine_choice
thisIsCamelCase <- 8 #alsoTotallyWorks
some.maniacs.use.periods <- 8 # probably.best.avoided
And_someTimes.People_doSTRANGEtHiNgS <- 8 # PLEASE NeVeR DO ANYTHING LIKE THIS!
x <- 1:5 # sequence of the form starting_number:ending_number
?seq
seq()
seq(from = 1, to = 5)
seq(from = 1, to = 5, by = 2)
# We can also assign a vector of values this way
x <- c(2, 8.5, 1, 9)
letters <- c("a", "b", "c", "d")
c(x, letters)
x[1]
x[1:2]
x[c(1, 3)]
names(x)
names(x) <- c("first", "second", "third", "fourth")
names(x)
x["first"]
# Add
2 + 3
# subtract
2 - 3
# multiplication
2 * 3
# Division
10/2
# Exponents
4^2
# Roots
4^(1/2)
(2^3)+4*(5/3)
x <- 8
x = 8
x
# Need to assign something to y!
y <- 2
y
# add em up:
x + y
# multiply them
x * y
# define the product as z
z <- x * y
this_is_snake_case <- 8 # a_fine_choice
thisIsCamelCase <- 8 #alsoTotallyWorks
some.maniacs.use.periods <- 8 # probably.best.avoided
And_someTimes.People_doSTRANGEtHiNgS <- 8 # PLEASE NeVeR DO ANYTHING LIKE THIS!
x <- 1:5 # sequence of the form starting_number:ending_number
?seq
seq()
seq(from = 1, to = 5)
seq(from = 1, to = 5, by = 2)
# We can also assign a vector of values this way
x <- c(2, 8.5, 1, 9)
letters <- c("a", "b", "c", "d")
c(x, letters)
x <- 8
y <- seq(from = 2, to = 16, by = 2)
x + y
z <- c(5, 10)
q <- seq(from = 5, to = 25, by = 5)
q*z
q[1]
q[1:2]
q[c(1, 3)]
names(q)
names(q) <- c("first", "second", "third", "fourth", "fifth")
names(1)
names(q)
q["first"]
q[1]
q[1]
?NULL
?NA
typeof(Inf)
?numeric
?double
-Inf
typeof(-Inf)
?character
?string
?character
?Boolean
?TRUE
x <- NA
x
typeof(x)
x <- NaN
typeof(x)
?NaN
is.finite(NA)
is.finite(NaN)
is.numeric(NA)
is.numeric(NaN)
x <- c(1, 3, 5.6, NA)
?NaN
0/0
?NULL
# Now, let's read in the pragmatic_scales_data CSV file and save it as an object called ps_data
ps_data <- read.csv("pragmatic_scales_data.csv", header = TRUE)
# Uncomment the line below to install the `foreign` package
ps_data_spss <- read.spss('pragmatic_scales_data.sav', to.data.frame = TRUE)
#install.packages("rio")
library(rio)
# Now, let's read in the pragmatic_scales_data CSV file and save it as an object called ps_data
ps_data <- import("pragmatic_scales_data.csv", header = TRUE)
# Uncomment the line below to install the `foreign` package
ps_data_spss <- import('pragmatic_scales_data.sav', to.data.frame = TRUE)
# Uncomment the line below to install the `foreign` package
ps_data_spss <- import('pragmatic_scales_data.sav')
typeof(1)
typeof(TRUE)
typeof(1l)
typeof(1L)
typeof(NA_character_)
typeof(NA)
typeof(NULL)
typeof(NaN)
typeof(Inf)
typeof("one")
mixed_vec <- c(x, letters)
typeof(mixed_vec)
mixed_vec
typeof(mixed_vec)
a + x
a <- "a"
a + x
b <- "8"
typof(x)
typeof(x)
typeof(y)
typeof(q)
typeif(z)
typeof(z)
typeof(b)
as.vector(mixed_vec)
as.numeric(mixed_vec)
names(named) <- c("a", "b", "c", "d", "e")
named <- 1:5
names(named) <- c("a", "b", "c", "d", "e")
named[1]
named["e"]
names(named[5]) <- "e_or_f"
named
names(named[5]) <- "f"
named
names(named["e"]) <- "f"
named
named
names(named["e"]) <- "f"
named

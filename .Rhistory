typeof(NaN)
typeof(Inf)
typeof("one")
x <- 1:5 # sequence of the form starting_number:ending_number
seq()
seq(from = 1, to = 5)
seq(from = 1, to = 5, by = 2)
# We can also assign a vector of values this way
x <- c(2, 8.5, 1, 9)
letters <- c("a", "b", "c", "d")
mixed_vec <- c(x, letters)
mixed_vec
typeof(mixed_vec)
as.numeric(mixed_vec)
z <- 6:10
z[1]
z[1:2]
z[c(1, 3)]
z[-1]
z[-c(1, 3)]
names(z)
names(z) <- c("first", "second", "third", "fourth", "fifth")
names(z)
z
z["first"]
z[1]
z[1] <- NA
z
z[2] <- z[2]^2
z
z[6] <- 11
z
names(z)
cory[1]
cory[1] * 7
cory[[1]]
cory[[1]] * 7
cory[[1]]
cory[[1]] * 7
cory[["dog_years"]] <- cory[["year"]] * 7
cory[["dog_years"]]
cory
cory$dog_years <- cory_year*7
cory$dog_years <- cory$year*7
cory
# Add
2 + 3
# subtract
2 - 3
# multiplication
2 * 3
# Division
10/2
# Exponents
4^2
# Roots
4^(1/2)
(2^3)+4*(5/3)
x <- 8
x = 8
x
# Need to assign something to y!
y <- 2
y
# add em up:
x + y
# multiply them
x * y
# define the product as z
z <- x * y
this_is_snake_case <- 8 # a_fine_choice
thisIsCamelCase <- 8 #alsoTotallyWorks
some.maniacs.use.periods <- 8 # probably.best.avoided
And_someTimes.People_doSTRANGEtHiNgS <- 8 # PLEASE NEVER DO ANYTHING LIKE THIS!
typeof(1)
typeof(TRUE)
typeof(1L)
typeof(NA_character_)
typeof(NA)
typeof(NULL)
typeof(NaN)
typeof(Inf)
typeof("one")
x <- 1:5 # sequence of the form starting_number:ending_number
seq()
seq(from = 1, to = 5)
seq(from = 1, to = 5, by = 2)
# We can also assign a vector of values this way
x <- c(2, 8.5, 1, 9)
letters <- c("a", "b", "c", "d")
mixed_vec <- c(x, letters)
mixed_vec
typeof(mixed_vec)
as.numeric(mixed_vec)
z <- 6:10
z[1]
z[1:2]
z[c(1, 3)]
z[-1]
z[-c(1, 3)]
names(z)
names(z) <- c("first", "second", "third", "fourth", "fifth")
names(z)
z
z["first"]
z[1]
z[1] <- NA
z
z[2] <- z[2]^2
z
z[6] <- 11
z
names(z)[6] <- "sixth"
z
cory <- list(5L,
"Cory Costello",
TRUE)
cory
cory <- list(year = 5L,
name = "Cory Costello",
enrollment = TRUE)
cory
names(cory)
cory <- list(year = 5L,
name = "Cory Costello",
enrollment = TRUE,
fave_data = c("strings", "numbers")) # note c() to create a vector
cory
cory[1]
cory[[1]]
cory[[1]] * 7
cory["year"]
cory[["year"]]
cory$year
cory[["dog_years"]] <- cory[["year"]] * 7
cory
cory$dog_years <- cory$year*7
cory
cory[[4]][2]
cory[["fave_data"]][2]
cory$fave_data[2]
cory[["year"]][2] <- cory[["year"]]*7
cory
cory$year
# Add
2 + 3
# subtract
2 - 3
# multiplication
2 * 3
# Division
10/2
# Exponents
4^2
# Roots
4^(1/2)
(2^3)+4*(5/3)
x <- 8
x = 8
x
# Need to assign something to y!
y <- 2
y
# add em up:
x + y
# multiply them
x * y
# define the product as z
z <- x * y
this_is_snake_case <- 8 # a_fine_choice
thisIsCamelCase <- 8 #alsoTotallyWorks
some.maniacs.use.periods <- 8 # probably.best.avoided
And_someTimes.People_doSTRANGEtHiNgS <- 8 # PLEASE NEVER DO ANYTHING LIKE THIS!
var_1 <- 4
var_2 <- var_1^6
var_1
var_2
typeof(1)
typeof(TRUE)
typeof(1L)
typeof(NA_character_)
typeof(NA)
typeof(NULL)
typeof(NaN)
typeof(Inf)
typeof("one")
x <- 1:5 # sequence of the form starting_number:ending_number
seq()
seq(from = 1, to = 5)
seq(from = 1, to = 5, by = 2)
# We can also assign a vector of values this way
x <- c(2, 8.5, 1, 9)
letters <- c("a", "b", "c", "d")
mixed_vec <- c(x, letters)
mixed_vec
typeof(mixed_vec)
as.numeric(mixed_vec)
x <- 8
y <- seq(from = 2, to = 16, by = 2)
x + y
z <- c(5, 10)
q <- seq(from = 5, to = 25, by = 5)
q*z
b <- "8"
typeof(x)
typeof(y)
typeof(q)
typeof(z)
typeof(b)
as.numeric(b) + x
z <- 6:10
z[1]
z[1:2]
z[c(1, 3)]
z[-1]
z[-c(1, 3)]
names(z)
names(z) <- c("first", "second", "third", "fourth", "fifth")
names(z)
z
z["first"]
z[1]
z[1] <- NA
z
z[2] <- z[2]^2
z
z[6] <- 11
z
names(z)[6] <- "sixth"
z
cory <- list(6L,
"Cory Costello",
TRUE)
cory
cory <- list(year = 6L,
name = "Cory Costello",
enrollment = TRUE)
cory
names(cory)
cory <- list(year = 6L,
name = "Cory Costello",
enrollment = TRUE,
fave_data = c("strings", "numbers")) # note c() to create a vector
cory
cory[1]
cory[[1]]
cory[[1]] * 7
cory["year"]
cory[["year"]]
cory$year
cory[["dog_years"]] <- cory[["year"]] * 7
cory
cory$dog_years <- cory$year*7
cory
cory <- list(year = 6L,
name = "Cory Costello",
enrollment = TRUE,
fave_data = c("strings", "numbers")) # note c() to create a vector
cory
cory[[4]][2]
cory[["fave_data"]][2]
cory$fave_data[2]
cory[["year"]][2] <- cory[["year"]]*7
cory$year
mat <- matrix(data = c(1, 2, # data in either row-wise or column-wise order
3, 4), # don't have to do two lines, but it looks nice
nrow = 2, # number of rows
ncol = 2, # number of columns
byrow = TRUE) # tell it the order of data above
mat
mat[2, 2] <- mat[2, 2]^2
mat
mat2[3,] <- mat2[3,]*3
mat2 <- matrix(c(1, 2, 3,
4, 5, 6,
7, 8, 9),
nrow = 3,
byrow = TRUE)
mat2[,1] + mat2[,3]
mat2[3,] <- mat2[3,]*3
mat2
df$c4 <- df$c1 + df$c2
df_1 <- data.frame(c1 = c(1, 3),
c2 = c(2, 4),
c3 = c("a", "b"),
row.names = c("r1", "r2"))
df_1
df_1[1, 3]
df_1["r1", "c3"]
df_1[, "c2"]
df_1$c1
df_1$c1[1]
df$c4 <- df$c1 + df$c2
df_1$c4 <- df_1$c1 + df_1$c2
df_1
df_1$c1 =df_1$c1^2
df_1$c1
df_1
df_1$c1*df_1$c3
df_1 <- data.frame(c1 = c(1, 3),
c2 = c(2, 4),
c3 = c("a", "b"),
row.names = c("r1", "r2"))
df_1
df_1$c1
df_1$c1 =df_1$c1^2
df_1
df_1$c1 <- as.numeric(df_1$c1)
df_1
df_1$c1 <- as.integer(df_1$c1)
df_1
```{r}
pretty_mean <- function(data){
mean <- mean(data, na.rm = TRUE)
x <- paste("The Mean is", mean)
print(x)
}
pretty_mean(vec_w_na)
df_2 <- data.frame(c1 = c(1, 2, 3),
c2 = c(2, 4, 6),
c3 = c("a", "b", "c"))
str(df_2)
df_2$c4 <- df_2$c1 + df_2$c2
df_2
df_2[1,] + df_2[2, ]
x[3:4] <- x[3:4]*5
x <- 1:20
x[3:4] <- x[3:4]*5
library(rio)
ps_data <- import("pragmatic_scales_data.csv")
library(tidyverse)
ps_data %>%
filter(age > 2) %>%
select(correct)
starwars %>%
select(name, homeworld)
starwars %>%
select(name:homeworld)
starwars %>%
select(contains("color"))
starwars %>%
select(homeworld, name, everything())
starwars
starwars %>%
select(starts_with("h"), everything())
starwars %>%
select(name, species, ends_with("color"))
starwars %>%
select(name, species, contains("color"))
starwars$mass
77*.03
77/12
starwars %>%
filter(height < 100)
starwars %>%
filter(height > mean(height, na.rm = TRUE) + sd(height, na.rm = TRUE))
starwars %>%
filter(mass == NA)
starwars %>%
filter(is.na(mass)) # note you wrap the variable in is.na()
starwars %>%
filter(height > mean(height, na.rm = TRUE) + sd(height, na.rm = TRUE) &
mass > mean(mass, na.rm = TRUE) + sd(mass, na.rm = TRUE))
starwars %>%
filter(height > mean(height, na.rm = TRUE) + sd(height, na.rm = TRUE) &
mass < mean(mass, na.rm = TRUE) + sd(mass, na.rm = TRUE))
mean(mass, na.rm = TRUE) + sd(mass, na.rm = TRUE)
mean(starwars$mass)
mean(starwars$mass, na.rm = TRUE)
sd(starwars$mass, na.rm = TRUE)
starwars %>%
filter(height > mean(height, na.rm = TRUE) + sd(height, na.rm = TRUE) &
mass > mean(mass, na.rm = TRUE) + sd(mass, na.rm = TRUE))
starwars %>%
filter(height > mean(height, na.rm = TRUE) + sd(height, na.rm = TRUE) &
mass >= mean(mass, na.rm = TRUE) + sd(mass, na.rm = TRUE))
starwars %>%
filter(height > mean(height, na.rm = TRUE) + sd(height, na.rm = TRUE) &
mass < mean(mass, na.rm = TRUE) + sd(mass, na.rm = TRUE))
starwars %>%
filter(height > mean(height, na.rm = TRUE) + sd(height, na.rm = TRUE) &
mass < mean(mass, na.rm = TRUE) - sd(mass, na.rm = TRUE))
starwars %>%
filter(height > mean(height, na.rm = TRUE) + sd(height, na.rm = TRUE) &
mass < mean(mass, na.rm = TRUE))
starwars %>%
filter(height > mean(height, na.rm = TRUE) + sd(height, na.rm = TRUE) |
height < mean(height, na.rm = TRUE) + sd(height, na.rm = TRUE))
starwars %>%
filter(hair_color == "grey")
starwars %>%
filter(hair_color == "grey" |
hair_color == "brown")
!TRUE
starwars %>%
filter(!is.na(variable))
starwars %>%
filter(!is.na(mass))
!TRUE
!FALSE
! 5 == 5
!TRUE
!FALSE
! 5 == 5
! 5 == 4
starwars %>%
filter(hair_color != "brown")
starwars %>%
filter(str_detect(hair_color, "grey")) # first argument is string var,
starwars %>%
filter(!str_detect(hair_color, "grey"))
starwars %>% filter(birth_year >= 200)
starwars
starwars %>%
filter(birth_year > 200)
starwars %>%
filter(birth_year >= 200)
starwars %>%
filter(!str_detect(eye_color, "blue")) %>%
select(name, eye_color, species)
starwars %>%
filter(species == "droid" & homeworld == "Tatooine" |
species == "human" & homeworld == "Naboo")
starwars %>%
filter(species == "droid" & homeworld == "Tatooine")
starwars %>%
filter(species == "Droid" & homeworld == "Tatooine")
starwars %>%
filter(species == "Droid" & homeworld == "Tatooine" |
species == "Human" & homeworld == "Naboo")
starwars %>%
filter(species == "Droid" & homeworld == "Tatooine" |
species == "Human" & homeworld == "Naboo") %>%
select(name, homeworld, species, ends_with("color"))
starwars$height_in_m = starwars$height/100
starwars
starwars %>%
select(height,height_in_m)
starwars %>%
mutate(height_in_mm = height*10,
height_in_m = height/100)
starwars
# cleaning it back up
starwars <- starwars %>%
select(-height_in_m)
starwars %>%
mutate(height_in_mm = height*10,
height_in_m = height/100)
starwars %>%
mutate(height_z = scale(height))
height_mass_z = mean(c("height_z", "mass_z"))
starwars %>%
mutate(height_z = scale(height),
mass_z = scale(mass),
height_mass_z = mean(c("height_z", "mass_z")))
starwars %>%
mutate(height_z = scale(height),
mass_z = scale(mass),
height_mass_z = mean(c("height_z", "mass_z")))
rowMeans()
?rowMeans()
starwars %>%
mutate(height_z = scale(height),
mass_z = scale(mass),
height_mass_z = rowMeans(c("height_z", "mass_z"), na.rm = TRUE))
starwars %>%
mutate(height_z = scale(height),
mass_z = scale(mass),
height_mass_z = rowMeans(c("height_z", "mass_z"), na.rm = TRUE))
starwars %>%
mutate(height_z = scale(height),
mass_z = scale(mass),
height_mass_z = mean(c(height_z, mass_z), na.rm = TRUE))
starwars %>%
mutate(height_z = scale(height),
mass_z = scale(mass),
height_mass_z = rowMeans(c(height_z, mass_z), na.rm = TRUE))
starwars %>%
mutate(height_z = scale(height),
mass_z = scale(mass),
height_mass_z = rowMeans(data.frame(height_z, mass_z), na.rm = TRUE))
starwars %>%
rowwise() %>%
mutate(height_z = scale(height),
mass_z = scale(mass),
height_mass_z = rowMeans(data.frame(height_z, mass_z), na.rm = TRUE))
starwars %>%
rowwise() %>%
mutate(height_z = scale(height),
mass_z = scale(mass),
height_mass_z = mean(c(height_z, mass_z), na.rm = TRUE))
starwars %>%
mutate(height_z = scale(height),
mass_z = scale(mass)) %>%
rowwise() %>%
mutate(height_mass_z = mean(c(height_z, mass_z), na.rm = TRUE))
starwars %>%
mutate(gender = factor(gender))
starwars %>%
transmute(height_z = scale(height),
mass_z = scale(mass))
starwars %>%
mutate(height_in_m = height / 100,
bmi = mass / height_in_m^2)
starwars %>%
transmute(height_in_m = height / 100,
bmi = mass / height_in_m^2)
starwars %>%
transmute(name = name,
mass = mass,
height_in_m = height / 100,
bmi = mass / height_in_m^2)
